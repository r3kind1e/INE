import os
import platform
import socket
import pickle
import sys
import errno
import subprocess


def getdirentry(path):
    """ get the entries in the directory given by path. """
    entries = []
    files = []
    folders = []
    symlinks = []
    if os.path.isdir(path):
        with os.scandir(path) as it:
            for entry in it:
                if entry.is_file():
                    files.append(entry.name)
                if entry.is_dir():
                    folders.append(entry.name)
                if entry.is_symlink():
                    symlinks.append(entry.name)
            entries.append(files)
            entries.append(folders)
            entries.append(symlinks)
            return entries
    else:
        return errno.ENOTDIR


def execSystemcmd(cmd):
    """ Execute system commands """
    proc = subprocess.run(cmd, capture_output=True, text=True)
    result = [proc.stdout, proc.stderr, proc.args]
    try:
        proc.check_returncode()
        return result
    except subprocess.CalledProcessError:
        print("[ERROR] '{}' execution failed with subprocess.CalledProcessError status: {}".format(" ".join(proc.args), proc.returncode))
        return result


def printmenu():
    return("""Select an option
    1. Get the names and types of the entries in the directory given by path
    2. Execute system commands
    0. exit\n""")

def main() -> int:
    osinfo = platform.platform()
    print("[INFO] The underlying platform of the client is: {}".format(osinfo))
    HOST = input("[INPUT] The remote host: ")    # The remote host
    PORT = int(input("[INPUT] The same port as used by the server(Integer): "))                # The same port as used by the server

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((HOST, PORT))
            while True:
                if osinfo.startswith("Darwin"):
                    # macOS (darwin kernel)
                    pass
                elif osinfo.startswith("Windows"):
                    # MS platforms
                    option = int(input(printmenu()))
                    # Get the content in the specified directory and send it to the server
                    if option == 0:
                        exit(0)
                    if option == 1:
                        path = input("[INPUT] Please enter the path of the folder where the content needs to be obtained: ")
                        entries = getdirentry(path)
                        try:
                            if entries != errno.ENOTDIR:  # directory exists
                                pathlist = path.split()
                                osinfolist = osinfo.split()
                                entries.append(pathlist)
                                entries.append(osinfolist)
                                data = pickle.dumps(entries)
                                s.send(data)
                                print(
                                    "[INFO] The following entries in the directory {} have been sent: \n{}".format(path,
                                                                                                                   entries))
                            else:
                                print(
                                    "[ERROR] {} is not a validate directory! No data has been sent to the server.".format(
                                        path))
                                continue
                        except socket.error:
                            print(
                                "[ERROR] The server has closed the connection. Please restart the server script, then restart the client script.")
                            sys.exit(0)
                        else:  # directory doesn't exit
                            continue
                        pass
                    # Execute system commands and send the result to server
                    if option == 2:
                        cmd = input("[INPUT] The system command to execute(e.g. whoami /all): ")
                        cmdlist = cmd.split()
                        result = pickle.dumps(execSystemcmd(cmdlist))   # see the usage of subprocess.Popen : https://stackoverflow.com/questions/4514751/pipe-subprocess-standard-output-to-a-variable
                        s.send(result)


                elif osinfo.startswith("Linux"):
                    option = int(input(printmenu()))
                    # Get the content in the specified directory and send it to the server
                    if option == 0:
                        exit(0)
                    if option == 1:
                        path = input("[INPUT] Please enter the path of the folder where the content needs to be obtained: ")
                        entries = getdirentry(path)
                        try:
                            if entries != errno.ENOTDIR:  # directory exists
                                pathlist = path.split()
                                osinfolist = osinfo.split()
                                entries.append(pathlist)
                                entries.append(osinfolist)
                                data = pickle.dumps(entries)
                                s.send(data)
                                print(
                                    "[INFO] The following entries in the directory {} have been sent: \n{}".format(path,
                                                                                                                   entries))
                            else:
                                print(
                                    "[ERROR] {} is not a validate directory! No data has been sent to the server.".format(
                                        path))
                                continue
                        except socket.error:
                            print(
                                "[ERROR] The server has closed the connection. Please restart the server script, then restart the client script.")
                            sys.exit(0)
                        else:  # directory doesn't exit
                            continue
                        pass
                    # Execute system commands and send the result to server
                    if option == 2:
                        cmd = input("[INPUT] The system command to execute(e.g. whoami /all): ")
                        cmdlist = cmd.split()
                        result = pickle.dumps(execSystemcmd(cmdlist))   # see the usage of subprocess.Popen : https://stackoverflow.com/questions/4514751/pipe-subprocess-standard-output-to-a-variable
                        s.send(result)
                elif osinfo.startswith("Java"):
                    # Java platforms
                    pass
    except socket.error:
        print("[ERROR] socket failed with error, please run the server script first, then check if the server address or port is right.")
    finally:
        s.close()
    return 0


if __name__ == '__main__':
    sys.exit(main())